<?php

/**
 * Comment
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    helpdesk
 * @subpackage model
 * @author     Anatoly Pashin
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Comment extends BaseComment
{
  public function isRead() {
    $userId = sfContext::getInstance()->getUser()->getGuardUser()->getId();

    $read = Doctrine_Query::create()
      ->from('ReadedComments read')
      ->addWhere('read.user_id = ?', $userId)
      ->addWhere('read.comment_id = ?', $this->getId())
      ->addWhere('read.ticket_id = ?', $this->getTicketId())
      ->count() !== 0
    ;

    if (!$read) {
      $readRecord = ReadedComments::createFromArray([
        'user_id' => $userId,
        'ticket_id' => $this->getTicketId(),
        'comment_id' => $this->getId(),
      ]);
      $readRecord->save();
    }

    return $read;
  }

  public function postInsert($event) {
    // send message to ticket creator and observers
    if (!$this->getSkipNotification()) {
      // to creator
      if ($this->getCreatedBy() != $this->getTicket()->getCreatedBy()) {
        $to = $this->getTicket()->getRealSender() ?: $this->getTicket()->getCreator()->getEmailAddress();
        Email::send($to, Email::generateSubject($this->getTicket()), EmailTemplate::newComment($this));
      }

      // to observers
      $observers = $this->getTicket()->getObservers();
      foreach ($observers as $observer) {
        if ($observer->getId() != $this->getCreatedBy() and $observer->getId() != $this->getTicket()->getCreatedBy()) {
          Email::send($observer->getEmailAddress(), Email::generateSubject($this->getTicket()), EmailTemplate::newComment($this));
        }
      }
    }

    // send messages to mentioned users
    $mentions = Helpdesk::findMentions($this->getText());
    if (count($mentions) > 0) {
      foreach ($mentions as $mention) {
        if ($mention->getId() != $this->getCreatedBy() and $mention->getId() != $this->getTicket()->getCreatedBy()) {
          Email::send($mention->getEmailAddress(), Email::generateSubject($this->getTicket()), EmailTemplate::newComment($this, 'mention'));

          $observingAlready = Doctrine_Query::create()
            ->from('RefTicketObserver ref')
            ->addWhere('ref.user_id = ?', $mention->getId())
            ->addWhere('ref.ticket_id = ?', $this->getTicket()->getId())
            ->count() !== 0
          ;
          if (!$observingAlready) {
            $observeRecord = RefTicketObserver::createFromArray([
              'user_id' => $mention->getId(),
              'ticket_id' => $this->getTicket()->getId(),
            ]);
            $observeRecord->save();
          }
        }
      }
    }
  }

  public function getChangedTicketStateToLabel()
  {
    static $states = [
      'applied' => 'принял в работу',
      'closed' => 'закрыл',
      'opened' => 'переоткрыл',
    ];

    return $states[ $this->getChangedTicketStateTo() ];
  }
}
