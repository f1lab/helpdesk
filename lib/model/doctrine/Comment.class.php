<?php

/**
 * Comment
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    helpdesk
 * @subpackage model
 * @author     Anatoly Pashin
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Comment extends BaseComment
{
  public function isRead() {
    $userId = sfContext::getInstance()->getUser()->getGuardUser()->getId();

    $read = Doctrine_Query::create()
      ->from('ReadedComments read')
      ->addWhere('read.user_id = ?', $userId)
      ->addWhere('read.comment_id = ?', $this->getId())
      ->addWhere('read.ticket_id = ?', $this->getTicketId())
      ->count() !== 0
    ;

    if (!$read) {
      $readRecord = ReadedComments::createFromArray([
        'user_id' => $userId,
        'ticket_id' => $this->getTicketId(),
        'comment_id' => $this->getId(),
      ]);
      $readRecord->save();
    }

    return $read;
  }

  public function postInsert($event) {
    // send messages to mentioned users
    $mentions = Helpdesk::findMentions($this->getText());
    if (count($mentions) > 0) {
      foreach ($mentions as $mention) {
        if ($mention->getId() !== $this->getTicket()->getCreatedBy()) {
          Email::send($mention->getEmailAddress(), Email::generateSubject($this->getTicket()), 'Вас упомянули в комментарии к заявке http://helpdesk.f1lab.ru/tickets/' . $this->getTicket()->getId());

          $observingAlready = Doctrine_Query::create()
            ->from('RefTicketObserver ref')
            ->addWhere('ref.user_id = ?', $mention->getId())
            ->addWhere('ref.ticket_id = ?', $this->getTicket()->getId())
            ->count() !== 0
          ;
          if (!$observingAlready) {
            $observeRecord = RefTicketObserver::createFromArray([
              'user_id' => $mention->getId(),
              'ticket_id' => $this->getTicket()->getId(),
            ]);
            $observeRecord->save();
          }
        }
      }
    }

    // send message to ticket creator
    if ($this->getChangedTicketStateTo() === 'applied' or $this->getChangedTicketStateTo() === 'closed' or $this->getChangedTicketStateTo() === 'opened') {
      $texts = [
        'closed' => 'Заявка выполнена! Рады были помочь!',
        'opened' => 'Заявка переоткрыта.',
      ];

      if ($this->getChangedTicketStateTo() === 'applied') {
        $texts['applied'] = 'Ваша заявка принята в работу! Не переживайте, мы уже над ней работаем!';

        $responsibles = $this->getTicket()->getResponsibles();
        if (count($responsibles)) {
          $result = [];
          foreach ($responsibles as $responsible) {
            $result[] = $responsible->getFullName();
          }
          $texts['applied'] .= "\nОтветственные за выполнение: " . implode(', ', $result) . '.';
        }
      }

      $to = $this->getTicket()->getRealSender() ? $this->getTicket()->getRealSender() : $this->getTicket()->getCreator()->getEmailAddress();
      if ($to !== 'support@helpdesk.f1lab.ru') {
        Email::send($to, Email::generateSubject($this->getTicket()), $texts[ $this->getChangedTicketStateTo() ]);
      }
    }
  }

  public function getChangedTicketStateToLabel()
  {
    static $states = [
      'applied' => 'принял в работу',
      'closed' => 'закрыл',
      'opened' => 'переоткрыл',
    ];

    return $states[ $this->getChangedTicketStateTo() ];
  }
}
