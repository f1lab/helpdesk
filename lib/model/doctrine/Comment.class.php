<?php

/**
 * Comment
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    helpdesk
 * @subpackage model
 * @author     Anatoly Pashin
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Comment extends BaseComment
{
  public function isRead() {
    $temp = Doctrine_Core::getTable('ReadedComments')->createQuery('a')
      ->Where('a.user_id = ?',sfContext::getInstance()->getUser()->getGuardUser()->getId())
      ->andWhere('a.comment_id = ?',$this->getId())
      ->execute()
    ;

    if (0 == $temp->count()) {
      $record = new ReadedComments();
      $record->setUser_id(sfContext::getInstance()->getUser()->getGuardUser()->getId());
      $record->setComment_id($this->getId());
      $record->save();
    }

    return $temp->count();
  }

  public function postInsert($event) {
    // send message to ticket creator
    if ($this->getChangedTicketStateTo() === 'applied' or $this->getChangedTicketStateTo() === 'closed' or $this->getChangedTicketStateTo() === 'opened') {
      $texts = [
        'closed' => 'Заявка выполнена! Рады были помочь!',
        'opened' => 'Заявка переоткрыта.',
      ];

      if ($this->getChangedTicketStateTo() === 'applied') {
        $texts['applied'] = 'Ваша заявка принята в работу! Не переживайте, мы уже над ней работаем!';

        $responsibles = $this->getTicket()->getResponsibles();
        if (count($responsibles)) {
          $result = [];
          foreach ($responsibles as $responsible) {
            $result[] = $responsible->getFullName();
          }
          $texts['applied'] .= "\nОтветственные за выполнение: " . implode(', ', $result) . '.';
        }
      }

      $to = $this->getTicket()->getRealSender() ? $this->getTicket()->getRealSender() : $this->getTicket()->getCreator()->getEmailAddress();
      if ($to !== 'support@helpdesk.f1lab.ru') {
        Email::send($to, 'Re: [F1LAB-HLPDSK-' . $this->getTicket()->getId() . '] ' . $this->getTicket()->getName(), $texts[ $this->getChangedTicketStateTo() ]);
      }
    }
  }

  public function getChangedTicketStateToLabel()
  {
    static $states = [
      'applied' => 'принял в работу',
      'closed' => 'закрыл',
      'opened' => 'переоткрыл',
    ];

    return $states[ $this->getChangedTicketStateTo() ];
  }
}
