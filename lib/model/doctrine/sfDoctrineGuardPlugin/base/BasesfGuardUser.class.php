<?php

/**
 * BasesfGuardUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $first_name
 * @property string $last_name
 * @property string $email_address
 * @property string $username
 * @property string $algorithm
 * @property string $salt
 * @property string $password
 * @property boolean $is_active
 * @property boolean $is_super_admin
 * @property timestamp $last_login
 * @property enum $type
 * @property string $phone
 * @property Doctrine_Collection $Groups
 * @property Doctrine_Collection $Permissions
 * @property Doctrine_Collection $Tickets
 * @property Doctrine_Collection $Comments
 * @property Doctrine_Collection $Categories
 * @property Doctrine_Collection $ResponsibleForCompany
 * @property Doctrine_Collection $NotifyForCompany
 * @property Doctrine_Collection $sfGuardUserPermission
 * @property Doctrine_Collection $sfGuardUserGroup
 * @property sfGuardRememberKey $RememberKeys
 * @property sfGuardForgotPassword $ForgotPassword
 * @property Doctrine_Collection $RefCompanyResponsible
 * @property Doctrine_Collection $RefCompanyNotify
 * @property Doctrine_Collection $ResponsibleForTickets
 * @property Doctrine_Collection $ReadedTickets
 * @property Doctrine_Collection $ReadedComments
 * 
 * @method string                getFirstName()             Returns the current record's "first_name" value
 * @method string                getLastName()              Returns the current record's "last_name" value
 * @method string                getEmailAddress()          Returns the current record's "email_address" value
 * @method string                getUsername()              Returns the current record's "username" value
 * @method string                getAlgorithm()             Returns the current record's "algorithm" value
 * @method string                getSalt()                  Returns the current record's "salt" value
 * @method string                getPassword()              Returns the current record's "password" value
 * @method boolean               getIsActive()              Returns the current record's "is_active" value
 * @method boolean               getIsSuperAdmin()          Returns the current record's "is_super_admin" value
 * @method timestamp             getLastLogin()             Returns the current record's "last_login" value
 * @method enum                  getType()                  Returns the current record's "type" value
 * @method string                getPhone()                 Returns the current record's "phone" value
 * @method Doctrine_Collection   getGroups()                Returns the current record's "Groups" collection
 * @method Doctrine_Collection   getPermissions()           Returns the current record's "Permissions" collection
 * @method Doctrine_Collection   getTickets()               Returns the current record's "Tickets" collection
 * @method Doctrine_Collection   getComments()              Returns the current record's "Comments" collection
 * @method Doctrine_Collection   getCategories()            Returns the current record's "Categories" collection
 * @method Doctrine_Collection   getResponsibleForCompany() Returns the current record's "ResponsibleForCompany" collection
 * @method Doctrine_Collection   getNotifyForCompany()      Returns the current record's "NotifyForCompany" collection
 * @method Doctrine_Collection   getSfGuardUserPermission() Returns the current record's "sfGuardUserPermission" collection
 * @method Doctrine_Collection   getSfGuardUserGroup()      Returns the current record's "sfGuardUserGroup" collection
 * @method sfGuardRememberKey    getRememberKeys()          Returns the current record's "RememberKeys" value
 * @method sfGuardForgotPassword getForgotPassword()        Returns the current record's "ForgotPassword" value
 * @method Doctrine_Collection   getRefCompanyResponsible() Returns the current record's "RefCompanyResponsible" collection
 * @method Doctrine_Collection   getRefCompanyNotify()      Returns the current record's "RefCompanyNotify" collection
 * @method Doctrine_Collection   getResponsibleForTickets() Returns the current record's "ResponsibleForTickets" collection
 * @method Doctrine_Collection   getReadedTickets()         Returns the current record's "ReadedTickets" collection
 * @method Doctrine_Collection   getReadedComments()        Returns the current record's "ReadedComments" collection
 * @method sfGuardUser           setFirstName()             Sets the current record's "first_name" value
 * @method sfGuardUser           setLastName()              Sets the current record's "last_name" value
 * @method sfGuardUser           setEmailAddress()          Sets the current record's "email_address" value
 * @method sfGuardUser           setUsername()              Sets the current record's "username" value
 * @method sfGuardUser           setAlgorithm()             Sets the current record's "algorithm" value
 * @method sfGuardUser           setSalt()                  Sets the current record's "salt" value
 * @method sfGuardUser           setPassword()              Sets the current record's "password" value
 * @method sfGuardUser           setIsActive()              Sets the current record's "is_active" value
 * @method sfGuardUser           setIsSuperAdmin()          Sets the current record's "is_super_admin" value
 * @method sfGuardUser           setLastLogin()             Sets the current record's "last_login" value
 * @method sfGuardUser           setType()                  Sets the current record's "type" value
 * @method sfGuardUser           setPhone()                 Sets the current record's "phone" value
 * @method sfGuardUser           setGroups()                Sets the current record's "Groups" collection
 * @method sfGuardUser           setPermissions()           Sets the current record's "Permissions" collection
 * @method sfGuardUser           setTickets()               Sets the current record's "Tickets" collection
 * @method sfGuardUser           setComments()              Sets the current record's "Comments" collection
 * @method sfGuardUser           setCategories()            Sets the current record's "Categories" collection
 * @method sfGuardUser           setResponsibleForCompany() Sets the current record's "ResponsibleForCompany" collection
 * @method sfGuardUser           setNotifyForCompany()      Sets the current record's "NotifyForCompany" collection
 * @method sfGuardUser           setSfGuardUserPermission() Sets the current record's "sfGuardUserPermission" collection
 * @method sfGuardUser           setSfGuardUserGroup()      Sets the current record's "sfGuardUserGroup" collection
 * @method sfGuardUser           setRememberKeys()          Sets the current record's "RememberKeys" value
 * @method sfGuardUser           setForgotPassword()        Sets the current record's "ForgotPassword" value
 * @method sfGuardUser           setRefCompanyResponsible() Sets the current record's "RefCompanyResponsible" collection
 * @method sfGuardUser           setRefCompanyNotify()      Sets the current record's "RefCompanyNotify" collection
 * @method sfGuardUser           setResponsibleForTickets() Sets the current record's "ResponsibleForTickets" collection
 * @method sfGuardUser           setReadedTickets()         Sets the current record's "ReadedTickets" collection
 * @method sfGuardUser           setReadedComments()        Sets the current record's "ReadedComments" collection
 * 
 * @package    helpdesk
 * @subpackage model
 * @author     Anatoly Pashin
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasesfGuardUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('sf_guard_user');
        $this->hasColumn('first_name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('last_name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('email_address', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('username', 'string', 128, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 128,
             ));
        $this->hasColumn('algorithm', 'string', 128, array(
             'type' => 'string',
             'default' => 'sha1',
             'notnull' => true,
             'length' => 128,
             ));
        $this->hasColumn('salt', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('password', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('is_active', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 1,
             ));
        $this->hasColumn('is_super_admin', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('last_login', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'it-admin',
              1 => 'user',
             ),
             'notnull' => true,
             'default' => 'user',
             ));
        $this->hasColumn('phone', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));


        $this->index('is_active_idx', array(
             'fields' => 
             array(
              0 => 'is_active',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('sfGuardGroup as Groups', array(
             'refClass' => 'sfGuardUserGroup',
             'local' => 'user_id',
             'foreign' => 'group_id'));

        $this->hasMany('sfGuardPermission as Permissions', array(
             'refClass' => 'sfGuardUserPermission',
             'local' => 'user_id',
             'foreign' => 'permission_id'));

        $this->hasMany('Ticket as Tickets', array(
             'local' => 'id',
             'foreign' => 'created_by',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Comment as Comments', array(
             'local' => 'id',
             'foreign' => 'created_by',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Category as Categories', array(
             'refClass' => 'RefUserCategory',
             'local' => 'user_id',
             'foreign' => 'category_id'));

        $this->hasMany('sfGuardGroup as ResponsibleForCompany', array(
             'refClass' => 'RefCompanyResponsible',
             'local' => 'user_id',
             'foreign' => 'group_id'));

        $this->hasMany('sfGuardGroup as NotifyForCompany', array(
             'refClass' => 'RefCompanyNotify',
             'local' => 'user_id',
             'foreign' => 'group_id'));

        $this->hasMany('sfGuardUserPermission', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('sfGuardUserGroup', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('sfGuardRememberKey as RememberKeys', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('sfGuardForgotPassword as ForgotPassword', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('RefCompanyResponsible', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('RefCompanyNotify', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Ticket as ResponsibleForTickets', array(
             'refClass' => 'RefTicketResponsible',
             'local' => 'user_id',
             'foreign' => 'ticket_id'));

        $this->hasMany('ReadedTickets', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('ReadedComments', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}