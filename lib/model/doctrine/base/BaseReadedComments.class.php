<?php

/**
 * BaseReadedComments
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $user_id
 * @property integer $comment_id
 * @property Comment $Comment
 * @property sfGuardUser $User
 * 
 * @method integer        getUserId()     Returns the current record's "user_id" value
 * @method integer        getCommentId()  Returns the current record's "comment_id" value
 * @method Comment        getComment()    Returns the current record's "Comment" value
 * @method sfGuardUser    getUser()       Returns the current record's "User" value
 * @method ReadedComments setUserId()     Sets the current record's "user_id" value
 * @method ReadedComments setCommentId()  Sets the current record's "comment_id" value
 * @method ReadedComments setComment()    Sets the current record's "Comment" value
 * @method ReadedComments setUser()       Sets the current record's "User" value
 * 
 * @package    helpdesk
 * @subpackage model
 * @author     Anatoly Pashin
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseReadedComments extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('readed_comments');
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('comment_id', 'integer', null, array(
             'type' => 'integer',
             ));


        $this->index('unique_for_user_and_comment', array(
             'fields' => 
             array(
              0 => 'user_id',
              1 => 'comment_id',
             ),
             'type' => 'unique',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Comment', array(
             'local' => 'comment_id',
             'foreign' => 'id'));

        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}