<?php

/**
 * BaseTicket
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property boolean $isClosed
 * @property string $name
 * @property clob $description
 * @property string $attach
 * @property timestamp $deadline
 * @property timestamp $planned_start
 * @property timestamp $planned_finish
 * @property integer $period_id
 * @property integer $company_id
 * @property Doctrine_Collection $Comments
 * @property Doctrine_Collection $Responsibles
 * @property Periods $Period
 * @property sfGuardGroup $ToCompany
 * @property sfGuardUser $sfGuardUser
 * @property Doctrine_Collection $RefTicketResponsible
 * @property Doctrine_Collection $ReadedTickets
 * 
 * @method boolean             getIsClosed()             Returns the current record's "isClosed" value
 * @method string              getName()                 Returns the current record's "name" value
 * @method clob                getDescription()          Returns the current record's "description" value
 * @method string              getAttach()               Returns the current record's "attach" value
 * @method timestamp           getDeadline()             Returns the current record's "deadline" value
 * @method timestamp           getPlannedStart()         Returns the current record's "planned_start" value
 * @method timestamp           getPlannedFinish()        Returns the current record's "planned_finish" value
 * @method integer             getPeriodId()             Returns the current record's "period_id" value
 * @method integer             getCompanyId()            Returns the current record's "company_id" value
 * @method Doctrine_Collection getComments()             Returns the current record's "Comments" collection
 * @method Doctrine_Collection getResponsibles()         Returns the current record's "Responsibles" collection
 * @method Periods             getPeriod()               Returns the current record's "Period" value
 * @method sfGuardGroup        getToCompany()            Returns the current record's "ToCompany" value
 * @method sfGuardUser         getSfGuardUser()          Returns the current record's "sfGuardUser" value
 * @method Doctrine_Collection getRefTicketResponsible() Returns the current record's "RefTicketResponsible" collection
 * @method Doctrine_Collection getReadedTickets()        Returns the current record's "ReadedTickets" collection
 * @method Ticket              setIsClosed()             Sets the current record's "isClosed" value
 * @method Ticket              setName()                 Sets the current record's "name" value
 * @method Ticket              setDescription()          Sets the current record's "description" value
 * @method Ticket              setAttach()               Sets the current record's "attach" value
 * @method Ticket              setDeadline()             Sets the current record's "deadline" value
 * @method Ticket              setPlannedStart()         Sets the current record's "planned_start" value
 * @method Ticket              setPlannedFinish()        Sets the current record's "planned_finish" value
 * @method Ticket              setPeriodId()             Sets the current record's "period_id" value
 * @method Ticket              setCompanyId()            Sets the current record's "company_id" value
 * @method Ticket              setComments()             Sets the current record's "Comments" collection
 * @method Ticket              setResponsibles()         Sets the current record's "Responsibles" collection
 * @method Ticket              setPeriod()               Sets the current record's "Period" value
 * @method Ticket              setToCompany()            Sets the current record's "ToCompany" value
 * @method Ticket              setSfGuardUser()          Sets the current record's "sfGuardUser" value
 * @method Ticket              setRefTicketResponsible() Sets the current record's "RefTicketResponsible" collection
 * @method Ticket              setReadedTickets()        Sets the current record's "ReadedTickets" collection
 * 
 * @package    helpdesk
 * @subpackage model
 * @author     Anatoly Pashin
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTicket extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('ticket');
        $this->hasColumn('isClosed', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             'notnull' => true,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('description', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('attach', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('deadline', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('planned_start', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('planned_finish', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('period_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('company_id', 'integer', null, array(
             'type' => 'integer',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Comment as Comments', array(
             'local' => 'id',
             'foreign' => 'ticket_id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('sfGuardUser as Responsibles', array(
             'refClass' => 'RefTicketResponsible',
             'local' => 'ticket_id',
             'foreign' => 'user_id'));

        $this->hasOne('Periods as Period', array(
             'local' => 'period_id',
             'foreign' => 'id'));

        $this->hasOne('sfGuardGroup as ToCompany', array(
             'local' => 'company_id',
             'foreign' => 'id'));

        $this->hasOne('sfGuardUser', array(
             'local' => 'created_by',
             'foreign' => 'id'));

        $this->hasMany('RefTicketResponsible', array(
             'local' => 'id',
             'foreign' => 'ticket_id'));

        $this->hasMany('ReadedTickets', array(
             'local' => 'id',
             'foreign' => 'ticket_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $signable0 = new Doctrine_Template_Signable(array(
             ));
        $softdelete0 = new Doctrine_Template_SoftDelete(array(
             ));
        $this->actAs($timestampable0);
        $this->actAs($signable0);
        $this->actAs($softdelete0);
    }
}